from Back_End.Camps.CampsStatus import CampsStatus
from Back_End.Refugee_Profile.refugee_profile_controller import RefugeeProfileController
from Back_End.Camps.CampsController import CampsController

"""
The class creates objects which details the status of the resources and population at each camp,
The initialise() method returns a list of camps and the status of their resources & capacity
Note: The list generated by the initialise(), method is ordered so the camps that need the most 
intervention are first in the list
"""

class CampsStatusController:
    def __init__(self, connection):
        self.refugee_controller = RefugeeProfileController(connection)
        self.camps_controller = CampsController(connection)
        self.__connection = connection

    # returns list of campStatus objects ordered where the first camp needs the most intervention
    def initialise(self):
        camp_ids = self.camps_controller.get_list_of_camp_ids()

        camp_status_list = []

        for camp_id in camp_ids:
            urgency_rating = 0

            name = self.camps_controller.get_camp_name(camp_id)

            location = self.camps_controller.get_camp_location(camp_id)

            capacity_result = self.get_capacity_status(camp_id)
            capacity_status = capacity_result[0]
            capacity_rating = capacity_result[1]
            urgency_rating += capacity_result[1]

            medicine_result = self.get_medicine_status(camp_id)
            medicine_status = medicine_result[0]
            medicine_rating = medicine_result[1]
            urgency_rating += medicine_result[1]

            food_result = self.get_food_status(camp_id)
            food_status = food_result[0]
            food_rating = food_result[1]
            urgency_rating += food_result[1]

            camp_status_object = CampsStatus(name, camp_id, location, capacity_status, medicine_status, food_status,
                                             urgency_rating, capacity_rating, medicine_rating, food_rating)
            camp_status_list.append(camp_status_object)
        camp_status_list.sort(key=lambda c: c.urgency_rating, reverse=True)

        return camp_status_list

    # calculates the camp status label i.e. "low", "normal" and the urgency rating 0 to 3, where 0 is not urgent,
    # and 3 is urgent
    def get_capacity_status(self, camp_id):
        number_of_refugees = self.refugee_controller.number_of_refugees_by_camp(camp_id)
        max_capacity = self.camps_controller.get_max_capacity(camp_id)
        
        if type(max_capacity[0]) == int and type(number_of_refugees) == int:
            if max_capacity[0] > 0 and number_of_refugees > 0:
                percentage = round((number_of_refugees / max_capacity[0]) * 100)
            else:
                percentage = 0
        else:
            return ["Empty Camp", 0]
        display_results = self.__get_display_string_rating_capacity(percentage)

        return display_results

    # calculates the camp status label i.e. "low", "normal" and the urgency rating
    # assuming 3 food packets per refugee per day
    def get_food_status(self, camp_id):
        number_of_refugees = self.refugee_controller.number_of_refugees_by_camp(camp_id)
        if type(number_of_refugees) == int:
            daily_amount_needed = number_of_refugees * 3
            current_food_amount = self.get_num_food(camp_id)

            if daily_amount_needed > 0 and current_food_amount > 0:
                percentage = round((current_food_amount / daily_amount_needed) * 100)
            else:
                percentage = 0
        else:
            return ["Empty Camp", 0]
        display_results = self.__get_display_string_rating_resources(percentage)

        # display word, rating level traffic light
        return display_results

    # calculates the camp status label i.e. "low", "normal" and the urgency rating
    # assumes we need 1 med pack for every 5 refugees
    def get_medicine_status(self, camp_id):
        number_of_refugees = self.refugee_controller.number_of_refugees_by_camp(camp_id)
        daily_amount_needed = 0
        if type(number_of_refugees) == int:
            daily_amount_needed = round(number_of_refugees / 5)

            current_medicine_amount = self.get_num_medicine(camp_id)

            if daily_amount_needed > 0 and current_medicine_amount > 0:
                percentage = round((current_medicine_amount / daily_amount_needed) * 100)
            else:
                percentage = 0
        else:
            return ["Empty Camp", 0]

        display_results = self.__get_display_string_rating_resources(percentage)

        return display_results

    # returns an array with a display string and rating for resources
    def __get_display_string_rating_resources(self, percentage):

        if percentage < 80:  # 0 to 79
            return ["Low", 2]
        elif percentage < 120:  #80 - 119
            return ["Normal", 1]
        return ["Surplus", 0]  # 120+

    # returns an array with a display string and rating for the capacity
    def __get_display_string_rating_capacity(self, percentage):

        if percentage < 80:
            return ["Under capacity", 0]
        elif percentage < 100:
            return ["Near capacity", 0]
        elif percentage == 100:
            return ["Full", 1]
        return ["Over capacity", 2]

    # get number of food packs associated with the camp
    def get_num_food(self, camp_id):
        c = self.__connection.cursor()
        c.execute(f"SELECT num_food FROM camps WHERE camp_id = {camp_id}")
        result = c.fetchone()
        if self.camps_controller.does_camp_exist(camp_id):
            return result[0]
        return 0

    # get number of medicine packs
    def get_num_medicine(self, camp_id):
        c = self.__connection.cursor()
        c.execute(f"SELECT num_medicine FROM camps WHERE camp_id = {camp_id}")
        result = c.fetchone()
        if self.camps_controller.does_camp_exist(camp_id):
            return result[0]
        return 0
